# Generated from Words.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,7,120,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,93,
        8,0,1,1,1,1,1,2,4,2,98,8,2,11,2,12,2,99,1,3,1,3,1,4,4,4,105,8,4,
        11,4,12,4,106,1,5,4,5,110,8,5,11,5,12,5,111,1,6,3,6,115,8,6,1,6,
        1,6,3,6,119,8,6,0,0,7,1,1,3,2,5,3,7,4,9,5,11,6,13,7,1,0,4,14,0,65,
        90,97,122,193,193,201,201,205,205,209,209,211,211,218,218,225,225,
        233,233,237,237,241,241,243,243,250,250,7,0,33,33,44,46,59,59,63,
        63,161,161,191,191,8212,8212,1,0,48,57,2,0,9,9,32,32,135,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,1,92,1,0,0,0,3,94,1,0,0,0,5,97,1,0,0,0,7,101,1,0,0,
        0,9,104,1,0,0,0,11,109,1,0,0,0,13,118,1,0,0,0,15,16,5,69,0,0,16,
        17,5,110,0,0,17,18,5,101,0,0,18,19,5,114,0,0,19,93,5,111,0,0,20,
        21,5,70,0,0,21,22,5,101,0,0,22,23,5,98,0,0,23,24,5,114,0,0,24,25,
        5,101,0,0,25,26,5,114,0,0,26,93,5,111,0,0,27,28,5,77,0,0,28,29,5,
        97,0,0,29,30,5,114,0,0,30,31,5,122,0,0,31,93,5,111,0,0,32,33,5,65,
        0,0,33,34,5,98,0,0,34,35,5,114,0,0,35,36,5,105,0,0,36,93,5,108,0,
        0,37,38,5,77,0,0,38,39,5,97,0,0,39,40,5,121,0,0,40,93,5,111,0,0,
        41,42,5,74,0,0,42,43,5,117,0,0,43,44,5,110,0,0,44,45,5,105,0,0,45,
        93,5,111,0,0,46,47,5,74,0,0,47,48,5,117,0,0,48,49,5,108,0,0,49,50,
        5,105,0,0,50,93,5,111,0,0,51,52,5,65,0,0,52,53,5,103,0,0,53,54,5,
        111,0,0,54,55,5,115,0,0,55,56,5,116,0,0,56,93,5,111,0,0,57,58,5,
        83,0,0,58,59,5,101,0,0,59,60,5,112,0,0,60,61,5,116,0,0,61,62,5,105,
        0,0,62,63,5,101,0,0,63,64,5,109,0,0,64,65,5,98,0,0,65,66,5,114,0,
        0,66,93,5,101,0,0,67,68,5,79,0,0,68,69,5,99,0,0,69,70,5,116,0,0,
        70,71,5,117,0,0,71,72,5,98,0,0,72,73,5,114,0,0,73,93,5,101,0,0,74,
        75,5,78,0,0,75,76,5,111,0,0,76,77,5,118,0,0,77,78,5,105,0,0,78,79,
        5,101,0,0,79,80,5,109,0,0,80,81,5,98,0,0,81,82,5,114,0,0,82,93,5,
        101,0,0,83,84,5,68,0,0,84,85,5,105,0,0,85,86,5,99,0,0,86,87,5,105,
        0,0,87,88,5,101,0,0,88,89,5,109,0,0,89,90,5,98,0,0,90,91,5,114,0,
        0,91,93,5,101,0,0,92,15,1,0,0,0,92,20,1,0,0,0,92,27,1,0,0,0,92,32,
        1,0,0,0,92,37,1,0,0,0,92,41,1,0,0,0,92,46,1,0,0,0,92,51,1,0,0,0,
        92,57,1,0,0,0,92,67,1,0,0,0,92,74,1,0,0,0,92,83,1,0,0,0,93,2,1,0,
        0,0,94,95,5,58,0,0,95,4,1,0,0,0,96,98,7,0,0,0,97,96,1,0,0,0,98,99,
        1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,6,1,0,0,0,101,102,7,1,0,
        0,102,8,1,0,0,0,103,105,7,2,0,0,104,103,1,0,0,0,105,106,1,0,0,0,
        106,104,1,0,0,0,106,107,1,0,0,0,107,10,1,0,0,0,108,110,7,3,0,0,109,
        108,1,0,0,0,110,111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,
        12,1,0,0,0,113,115,5,13,0,0,114,113,1,0,0,0,114,115,1,0,0,0,115,
        116,1,0,0,0,116,119,5,10,0,0,117,119,5,13,0,0,118,114,1,0,0,0,118,
        117,1,0,0,0,119,14,1,0,0,0,7,0,92,99,106,111,114,118,0
    ]

class WordsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MONTH = 1
    COLON = 2
    WORD = 3
    PUNCTUATION = 4
    NUMBER = 5
    WHITESPACE = 6
    NEWLINE = 7

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'" ]

    symbolicNames = [ "<INVALID>",
            "MONTH", "COLON", "WORD", "PUNCTUATION", "NUMBER", "WHITESPACE", 
            "NEWLINE" ]

    ruleNames = [ "MONTH", "COLON", "WORD", "PUNCTUATION", "NUMBER", "WHITESPACE", 
                  "NEWLINE" ]

    grammarFileName = "Words.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


